from _typeshed import Incomplete
from aiosmb import logger as logger
from octopwn.clients.base import ClientConsoleBase as ClientConsoleBase
from octopwn.common.utils import create_random_file as create_random_file
from octopwn.remote.protocol.python import messages_pb2 as messages_pb2, secrets_pb2 as secrets_pb2, smb_pb2 as smb_pb2

class SSHClientSession:
    sessionid: Incomplete
    session: Incomplete
    stdin: Incomplete
    stdout: Incomplete
    stderr: Incomplete
    stdout_reader_task: Incomplete
    stderr_reader_task: Incomplete
    recorder_task: Incomplete
    def __init__(self, sessionid, session, stdin, stdout, stderr, stdout_reader_task, stderr_reader_task, recorder_task) -> None: ...
    async def close(self) -> None: ...
    async def resize_pty(self, cols: int, rows: int): ...

class SSHClient(ClientConsoleBase):
    connection: Incomplete
    target: Incomplete
    credential: Incomplete
    client: Incomplete
    sessions: Incomplete
    sftp_session: Incomplete
    def __init__(self, client_id, connection, cmd_q, msg_queue, prompt, octopwnobj) -> None: ...
    async def start(self): ...
    def get_sessionid(self): ...
    logon_ok: bool
    async def do_logout(self):
        """Logout"""
    async def do_ptyshell(self, record: bool = False):
        """Starts an interactive PTY shell"""
    sshconnection: Incomplete
    async def do_login(self):
        """Login"""
    async def do_sendshellcmd(self, cmd: str, shellid: int): ...
    async def do_sendchar(self, char: str, shellid: int): ...
    async def do_resize(self, cols: int, rows: int, shellid: int): ...
    async def do_remoteListDirectory(self, path: str, h_clientid: Incomplete | None = None, h_token: Incomplete | None = None): ...
    async def do_remotedeleteDirectory(self, path: str, h_clientid: Incomplete | None = None, h_token: Incomplete | None = None): ...
    async def do_remotecreateDirectory(self, path: str, h_clientid: Incomplete | None = None, h_token: Incomplete | None = None): ...
    async def do_remotedeleteFile(self, path: str, h_clientid: Incomplete | None = None, h_token: Incomplete | None = None): ...
    async def do_remoteDownloadFile(self, path: str, h_clientid: Incomplete | None = None, h_token: Incomplete | None = None): ...
