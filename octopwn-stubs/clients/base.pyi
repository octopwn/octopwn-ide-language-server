import uuid
from _typeshed import Incomplete
from collections.abc import Generator
from octopwn import logger as logger
from octopwn.common.utils import chunker as chunker, convert_bool as convert_bool, hexdump as hexdump
from octopwn.remote.protocol.python import messages_pb2 as messages_pb2

class OctoPwnPendingOp:
    pid: Incomplete
    coro: Incomplete
    task: Incomplete
    name: Incomplete
    started_at: Incomplete
    started_by: Incomplete
    finished: bool
    finished_at: Incomplete
    success: Incomplete
    error: Incomplete
    def __init__(self, pid, coro, name, started_by) -> None: ...
    async def run(self): ...
    async def stop(self) -> None: ...
    def get_info_d(self): ...
    def get_info_j(self): ...

class ClientConsoleBase:
    prompt: Incomplete
    octopwnobj: Incomplete
    settings: Incomplete
    command_modifier: Incomplete
    ATTR_START: str
    doc_header: str
    aliases: Incomplete
    cmd_q: Incomplete
    client_id: Incomplete
    original_connection: Incomplete
    msg_queue: Incomplete
    nologon_commands: Incomplete
    logon_ok: bool
    pending_ops: Incomplete
    pending_ctr: int
    active_remote_channels: Incomplete
    help_groups: Incomplete
    def __init__(self, client_id: int, connection, cmd_q, msg_queue, prompt, octopwnobj, command_modifier: Incomplete | None = None, settings: Incomplete | None = None) -> None: ...
    def get_pendingid(self): ...
    async def start_op(self, coro, name, started_by: str = 'MAIN'): ...
    async def do_listop(self, to_print: bool = True, h_token: Incomplete | None = None): ...
    async def do_stopop(self, pid: int, to_print: bool = True): ...
    def load_settings(self, settings) -> None: ...
    def to_dict(self): ...
    def make_completer(self): ...
    def command_list(self): ...
    async def do_help(self, command: str = None, to_print: bool = True):
        """Displays help menu"""
    async def remotemsg(self, message, remote_clientid: Incomplete | None = None, remote_token: Incomplete | None = None): ...
    async def do_quit(self): ...
    async def do_pwd(self):
        """Prints the path of the current working dir"""
    async def do_lls(self, path: Incomplete | None = None):
        """Lists files and folders in given path. Default: current workdir"""
    async def do_lcp(self, src, dst):
        """Copies file from src to dst."""
    async def do_lmove(self, src, dst):
        """Moves files and folders from src to dst."""
    async def do_lcat(self, filepath):
        """Prints !TEXT! file contents to current window"""
    async def do_lxxd(self, filepath):
        """Prints hex contents of the file to the current window"""
    def print_sync(self, msg: str = '', store_file: bool = False) -> None: ...
    async def print(self, msg: str = '', h_username: Incomplete | None = None) -> None: ...
    async def print_table(self, lines, separate_head: bool = True) -> None:
        """Prints a formatted table given a 2 dimensional array"""
    async def print_hex(self, data, offset: int = 0) -> None: ...
    def print_exc_sync(self, err: Exception, with_tb: bool = True, extra_msg: str = ''): ...
    async def print_exc(self, err: Exception, with_tb: bool = True, extra_msg: str = '', send_window_message: bool = True): ...
    async def change_prompt(self, newprompt) -> None: ...
    async def run(self): ...
    async def remote_command_internal(self, remote_addr: str, remote_clientid: uuid.UUID, msg: messages_pb2.OctoClientMessage, username: str = 'default'): ...
    async def remote_ok(self, remote_clientid, token, message: Incomplete | None = None): ...
    async def remote_continue(self, remote_clientid, token, message: Incomplete | None = None): ...
    async def remote_err(self, remote_clientid, token, message: Incomplete | None = None): ...
    async def remote_climsg(self, remote_clientid, message, remote_token: Incomplete | None = None): ...
    async def remote_recv_token(self, remote_clientid, token, to_cleanup: bool = True) -> Generator[Incomplete, None, None]: ...
    async def remote_in(self, remote_clientid: int, msg: messages_pb2.OctoClientMessage, username: str = 'default'): ...
    async def remote_request_channel(self, clientid, token): ...
    async def send_window_error(self, message, severity: int = 1, h_token: Incomplete | None = None) -> None:
        """
\t\tCreates an error popup on the client, if the client implements the functionality.
\t\t"""
    async def send_window_popup(self, title, message, buttontxt, h_token: Incomplete | None = None) -> None:
        """
\t\tTriggers a popup window on the client, if the client implements the functionality.
\t\t"""
    async def send_window_message(self, msgtype: str, msg: Incomplete | None = None, stream: Incomplete | None = None, h_clientid: Incomplete | None = None, h_token: Incomplete | None = None):
        """
\t\tDispatches a message to the current session (eg. the client).
\t\t"""
    async def window_message_in(self, msgtype: str, msg): ...
