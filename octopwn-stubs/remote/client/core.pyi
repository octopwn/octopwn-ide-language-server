import ssl
from _typeshed import Incomplete
from octopwn._version import __banner__ as __banner__
from octopwn.common.clientconfig import ClientConfig as ClientConfig, ClientConfigBase as ClientConfigBase, ScannerConfig as ScannerConfig, ServerConfig as ServerConfig, UtilsConfig as UtilsConfig
from octopwn.common.credential import Credential as Credential
from octopwn.common.proxy import Proxy as Proxy, ProxyChain as ProxyChain
from octopwn.common.target import Target as Target
from octopwn.common.utils import gts as gts, gtt as gtt
from octopwn.remote import client as client
from octopwn.remote.client import logger as logger
from octopwn.remote.client.clients.base import ClientConsoleBaseRemote as ClientConsoleBaseRemote
from octopwn.remote.client.clients.ldap import LDAPClientConsoleRemote as LDAPClientConsoleRemote
from octopwn.remote.client.clients.rdp import RDPClientConsoleRemote as RDPClientConsoleRemote
from octopwn.remote.client.clients.scannerbase import ScannerConsoleBaseRemote as ScannerConsoleBaseRemote
from octopwn.remote.client.clients.smb import SMBClientConsoleRemote as SMBClientConsoleRemote
from octopwn.remote.protocol.python import messages_pb2 as messages_pb2, smb_pb2 as smb_pb2
from octopwn.remote.server.authentication import UserAuthError as UserAuthError
from octopwn.utils import OCTOPWN_UTIL_TABLE as OCTOPWN_UTIL_TABLE

class OctoPwnRemoteClient(ClientConsoleBaseRemote):
    url: Incomplete
    sslctx: Incomplete
    authmethod: Incomplete
    username: Incomplete
    password: Incomplete
    clients: Incomplete
    targets: Incomplete
    credentials: Incomplete
    proxies: Incomplete
    cmd_dispatch_table: Incomplete
    screen_handler: Incomplete
    screen_handler_app: Incomplete
    current_client_id: int
    client_messages: Incomplete
    ws: Incomplete
    remote_files: Incomplete
    channels: Incomplete
    def __init__(self, url: str, sslctx: ssl.SSLContext, screen_handler, authmethod: str, username: str = None, password: str = None) -> None: ...
    def get_clientid(self): ...
    async def print_exc(self, err: Exception, with_tb: bool = True, extra_msg: str = ''): ...
    async def handle_remote_out(self, clientid, msg) -> None: ...
    async def print_session_message(self, clientid, msg: str = '', username: Incomplete | None = None) -> None: ...
    async def print(self, msgdata, client_id: int = 0, h_username: Incomplete | None = None) -> None: ...
    async def do_switchclient(self, client_id: int):
        """Changes the current clinet INPUT and OUTPUT window to another one"""
    async def test(self) -> None: ...
    async def do_addtarget(self, ip: str, port: int = None, dcip: str = None, realm: str = None, hostname: str = None, to_print: bool = True): ...
    async def do_addcred(self, username_with_domain, secret, secrettype, certfile, keyfile) -> None: ...
    async def do_addproxy(self, ptype, ip, port, agentid): ...
    async def do_createclient(self, ctype, cauth, cid, tid, pid) -> None: ...
    async def do_createscanner(self, stype) -> None: ...
    async def do_createserver(self, stype) -> None: ...
    async def do_createutil(self, utype): ...
    async def do_changedescription(self, otype, oid, description) -> None: ...
    async def listDirectory(self, path: str): ...
    async def downloadFile_internal(self, token, res_q) -> None: ...
    async def downloadFile(self, path: str): ...
    async def deleteDirectory(self, path): ...
    async def createDirectory(self, path): ...
    async def deleteFile(self, path): ...
    async def createFileBytes(self, remotepath: str, filedata): ...
    async def createFile(self, localpath: str, remotepath: str): ...
    def command_list(self): ...
    async def do_createchain(self): ...
    async def do_addproxychain(self, cid, pid): ...
    async def addcredential_obj(self, credential: Credential, to_print: bool = True): ...
    async def addtarget_obj(self, target: Target, to_print: bool = True): ...
    async def process_message_internal(self, msg) -> None: ...
    def input_handler(self, in_buffer, clientid: Incomplete | None = None): ...
    async def process_incoming_message(self, msg) -> None: ...
    async def authenticate(self, ws): ...
    async def xxx(self) -> None: ...
    async def run(self) -> None: ...
    async def run_generic(self, comms) -> None: ...
