from aiosmb.commons.utils.ts2dt import *
from _typeshed import Incomplete
from octopwn.servers.relay.common.authentication.ntlm.structures.avpair import AVPAIRType as AVPAIRType, AVPairs as AVPairs

class LMResponse:
    Response: Incomplete
    def __init__(self) -> None: ...
    def to_bytes(self): ...
    @staticmethod
    def from_bytes(bbuff): ...
    @staticmethod
    def from_buffer(buff): ...

class LMv2Response:
    Response: Incomplete
    ChallengeFromClinet: Incomplete
    def __init__(self) -> None: ...
    def to_bytes(self): ...
    @staticmethod
    def from_bytes(bbuff): ...
    @staticmethod
    def from_buffer(buff): ...

class NTLMv1Response:
    Response: Incomplete
    def __init__(self) -> None: ...
    def to_bytes(self): ...
    @staticmethod
    def from_bytes(bbuff): ...
    @staticmethod
    def from_buffer(buff): ...

class NTLMv2Response:
    Response: Incomplete
    ChallengeFromClinet: Incomplete
    def __init__(self) -> None: ...
    def to_bytes(self): ...
    @staticmethod
    def from_bytes(bbuff): ...
    @staticmethod
    def from_buffer(buff): ...

class NTLMv2ClientChallenge:
    RespType: int
    HiRespType: int
    Reserved1: int
    TimeStamp: Incomplete
    Reserved2: int
    ChallengeFromClient: Incomplete
    Reserved3: int
    Details: Incomplete
    timestamp_dt: Incomplete
    raw_data: bytes
    def __init__(self) -> None: ...
    @staticmethod
    def construct(timestamp, client_challenge, details):
        """
\t\ttimestamp: datetime.datetime
\t\tclient_challenge: 8 bytes
\t\tdetails: AVPairs object
\t\t"""
    def to_bytes(self): ...
    @staticmethod
    def from_bytes(bbuff): ...
    @staticmethod
    def from_buffer(buff): ...
