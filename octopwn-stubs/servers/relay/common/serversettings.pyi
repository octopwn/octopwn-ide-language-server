from _typeshed import Incomplete
from asyncio.base_events import Server as Server
from asysocks.common.clienturl import SocksClientURL
from octopwn.clients.base import ClientConsoleBase as ClientConsoleBase
from octopwn.servers.relay.common.constants import RELAYClientType as RELAYClientType, RELAYServerType as RELAYServerType
from os import stat as stat

class ServerSettings:
    server_type: Incomplete
    server_socket: Incomplete
    ip: Incomplete
    port: Incomplete
    serverobj: Incomplete
    connsettingsobj: Incomplete
    def __init__(self, server_type: RELAYServerType, serverobj, connsettingsobj, listen_ip, listen_port) -> None: ...
    def to_dict(self): ...
    @staticmethod
    def from_json(x): ...
    @staticmethod
    def from_arg(x): ...
    @staticmethod
    def from_toml(x): ...
    def to_toml(self): ...
    def to_json(self): ...

class NTLMClientSettings:
    signdisable: Incomplete
    dropmic: Incomplete
    dropmic2: Incomplete
    modify_negotiate_cb: Incomplete
    modify_challenge_cb: Incomplete
    modify_authenticate_cb: Incomplete
    def __init__(self, signdisable: bool = False, dropmic: bool = False, dropmic2: bool = False) -> None: ...
    def to_dict(self): ...
    @staticmethod
    def from_keyword(keyword): ...
    @staticmethod
    def from_dict(d): ...
    @staticmethod
    def from_json(x): ...
    @staticmethod
    def from_toml(x): ...
    def to_toml(self): ...
    def to_json(self): ...

class ClientSettings:
    client_type: Incomplete
    clientobj: Incomplete
    ip: Incomplete
    port: Incomplete
    timeout: Incomplete
    proxies: Incomplete
    ntlm: Incomplete
    commands: Incomplete
    def __init__(self, client_type: RELAYClientType, clientobj: ClientConsoleBase, ip, port: Incomplete | None = None, proxies: Incomplete | None = None, timeout: int = 10, commands: str = '', ntlm: Incomplete | None = None) -> None: ...
    def get_ntlm(self) -> NTLMClientSettings: ...
    def get_proxy(self, endpoint_ip: Incomplete | None = None, endpoint_port: Incomplete | None = None) -> SocksClientURL: ...
    def to_dict(self): ...
    @staticmethod
    def from_json(x): ...
    @staticmethod
    def from_toml(x): ...
    @staticmethod
    def from_arg(x): ...

class ConfigFile:
    client_section_name: str
    client_settings: Incomplete
    server_section_name: str
    server_settings: Incomplete
    def __init__(self) -> None: ...
    def to_dict(self): ...
    @staticmethod
    def from_dict(d): ...
    @staticmethod
    def from_json(x): ...
    @staticmethod
    def from_toml(x): ...
    def to_toml(self): ...
    def to_json(self): ...

cliarg2key: Incomplete
