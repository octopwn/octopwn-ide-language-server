from wsnet.protocol import *
from _typeshed import Incomplete
from asyauth.common.credentials.kerberos import KerberosCredential as KerberosCredential
from asyauth.common.credentials.ntlm import NTLMCredential as NTLMCredential
from minikerberos.protocol.encryption import Enctype as Enctype

class AuthProxy:
    in_q: Incomplete
    ws: Incomplete
    token: Incomplete
    iter: int
    timeout: int
    def __init__(self, in_q, ws, token) -> None: ...
    async def sr(self, cmd: CMD): ...
    async def get_sequenceno(self): ...
    async def get_sessionkey(self): ...
    async def authenticate(self, auth_type, username, target, credusage, flags, authdata): ...

class AuthProxyNTLMClient:
    authproxy: Incomplete
    orig_credential: Incomplete
    authfactory: Incomplete
    ntlm_ctx: Incomplete
    def __init__(self, authproxy: AuthProxy, credential: NTLMCredential, authfactory) -> None: ...
    @property
    def ntlmChallenge(self): ...
    def get_seq_number(self): ...
    def get_sealkey(self, mode: str = 'Client'): ...
    def get_signkey(self, mode: str = 'Client'): ...
    async def encrypt(self, data, sequence_no): ...
    async def decrypt(self, data, sequence_no, direction: str = 'init', auth_data: Incomplete | None = None): ...
    async def sign(self, data, message_no, direction: Incomplete | None = None, reset_cipher: bool = False): ...
    async def verify(self, data, signature): ...
    def SEAL(self, signingKey, sealingKey, messageToSign, messageToEncrypt, seqNum, cipher_encrypt): ...
    def SIGN(self, signingKey, message, seqNum, cipher_encrypt): ...
    def get_session_key(self): ...
    def get_extra_info(self): ...
    def is_extended_security(self): ...
    def signing_needed(self): ...
    def encryption_needed(self): ...
    async def encrypt(self, data, message_no): ...
    async def decrypt(self, data, sequence_no, direction: str = 'init', auth_data: Incomplete | None = None): ...
    async def authenticate(self, authData: Incomplete | None = None, flags: Incomplete | None = None, seq_number: int = 0, spn: Incomplete | None = None, cb_data: Incomplete | None = None): ...
    def __deepcopy__(self, memo: Incomplete | None = None): ...

class AuthProxyKerberosClient:
    authproxy: Incomplete
    authfactory: Incomplete
    orig_credential: Incomplete
    iterations: int
    gssapi: Incomplete
    etype: Incomplete
    actual_ctx_flags: Incomplete
    seq_number: Incomplete
    session_key: Incomplete
    def __init__(self, authproxy: AuthProxy, credential: KerberosCredential, authfactory) -> None: ...
    def get_seq_number(self): ...
    def signing_needed(self): ...
    def encryption_needed(self): ...
    async def encrypt(self, data, message_no): ...
    async def decrypt(self, data, message_no, direction: str = 'init', auth_data: Incomplete | None = None): ...
    def get_session_key(self): ...
    async def authenticate(self, authData: Incomplete | None = None, flags=..., seq_number: int = 0, client_name: Incomplete | None = None, spn: Incomplete | None = None, cb_data: Incomplete | None = None): ...
    def __deepcopy__(self, memo: Incomplete | None = None): ...
