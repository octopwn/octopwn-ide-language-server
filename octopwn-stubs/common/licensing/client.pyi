import importlib
import io
from _typeshed import Incomplete
from octopwn.clients import OCTOPWN_CLIENT_TABLE as OCTOPWN_CLIENT_TABLE
from octopwn.scanners import OCTOPWN_SCANNER_TABLE as OCTOPWN_SCANNER_TABLE

OCTOPWN_LICENSING_CA: bytes

class LicensingException(Exception): ...
class LicensingImportException(LicensingException): ...
class LicensingEnctyptedImportException(LicensingException): ...

class EncryptedPycLoader(importlib.machinery.SourcelessFileLoader):
    fullname_temp: Incomplete
    decryption_function: Incomplete
    def __init__(self, fullname, path, decryption_function: Incomplete | None = None) -> None: ...
    def get_data(self, path): ...

class OctoLicensingClient:
    demo_mode: Incomplete
    ca_cert_data: Incomplete
    client_cert_data: Incomplete
    clinet_key_data: Incomplete
    licensing_server: str
    verify_url: Incomplete
    plugins_url: Incomplete
    def __init__(self, client_cert: Incomplete | None = None, client_key: Incomplete | None = None, ca_cert: Incomplete | None = None, demo_mode: bool = False, session_file_password: str = None) -> None: ...
    @staticmethod
    async def load_license_and_plugins_offline_emscripten(server_url: str, session_file_password: str = None): ...
    @staticmethod
    def load_license_and_plugins(license_file_zip: str, plugins_file_zip: str, session_file_password: str = None): ...
    @staticmethod
    def load_license_file_zip(license_file_zip: str, session_file_password: str = None): ...
    @staticmethod
    def load_license_pkcs12(pkcs12_content: bytes, password: str, session_file_password: str = None): ...
    @staticmethod
    async def setup(license_zip, plugins_zip: Incomplete | None = None, session_file_password: Incomplete | None = None): ...
    def set_password(self, password: str): ...
    def verify_client_offline(self): ...
    def decrypt_with_user_cert(self, data): ...
    def decrypt_functionalities(self, encrypted_functionalities_b64): ...
    async def verify_client_online_emscripten(self): ...
    async def verify_client_online(self): ...
    async def verify(self): ...
    def import_module(self, lookuptable, module_alias): ...
    def decrypt_compiled_module(self, modulename, enc_data): ...
    def import_encrypted_pyc(self, module_name, object_name): ...
    def load_plugin_key(self) -> None: ...
    def load_plugins_zip(self, data) -> None: ...
    async def fetch_plugins(self) -> None: ...
    async def fetch_plugins_online(self): ...
    async def fetch_plugins_online_pyodide(self): ...
    def get_supported_clients(self): ...
    def get_supported_scanners(self): ...
    def get_uid(self): ...
    def encrypt_session_file(self, session_file_data: io.BytesIO, outfile: io.BytesIO = None): ...
    def decrypt_session_file(self, session_file_data: None): ...

async def amain() -> None: ...
