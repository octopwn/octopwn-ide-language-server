from _typeshed import Incomplete
from octopwn._version import __banner__ as __banner__

def abort(event) -> None: ...
def copy_selection(event) -> None: ...

class ScreenHandlerBase:
    multi_window_support: Incomplete
    remoting_support: Incomplete
    def __init__(self, multi_window_support: bool = False, remoting_support: bool = False) -> None: ...
    async def print_main_window(self, msg, username: Incomplete | None = None) -> None: ...
    async def clear_main_window(self) -> None: ...
    async def client_added(self, cid, client): ...
    async def refresh_clients(self, force: bool = False): ...
    async def target_added(tid: int, target):
        """Called when a new target has been added"""
    async def refresh_targets(self, force: bool = False):
        """Called to trigger a full target window refresh"""
    async def refresh_proxies(self, force: bool = False): ...
    async def proxy_added(self, pid, proxy): ...
    async def credential_added(self, cid, credential):
        """Called when a new credential has been added"""
    async def refresh_credentials(self, force: bool = False):
        """Called to trigger a full credential window refresh"""
    async def set_input_dialog_title(self, clientid, title) -> None: ...
    def set_message_dialog_title(self, clientid: int, title: str): ...
    def abort(self, event: Incomplete | None = None) -> None: ...
    async def create_client_window(self, clientid: int, cliname: str, client_settings, client): ...
    async def print_client_msg(self, clientid: int, msg: str, username: str = None):
        """Called when a new message needs to be printed for a specific client window"""
    async def send_window_message(self, clientid: int, msgtype: str, msg: Incomplete | None = None, stream: Incomplete | None = None): ...
    async def run(self, octopwn, input_handler): ...
