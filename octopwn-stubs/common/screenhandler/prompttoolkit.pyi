from _typeshed import Incomplete
from octopwn._version import __banner__ as __banner__
from octopwn.common.screenhandler import ScreenHandlerBase as ScreenHandlerBase
from prompt_toolkit.key_binding.bindings.focus import focus_previous as focus_previous

def abort(event) -> None: ...
def copy_selection(event) -> None: ...

class ScreenHandlerPromptToolkitApplication:
    octopwn: Incomplete
    remoting_support: bool
    multi_window_support: bool
    message_area_textfield: Incomplete
    input_area_textfield: Incomplete
    dialog_window: Incomplete
    input_dialog: Incomplete
    creds_list_area: Incomplete
    creds_list_dialog: Incomplete
    target_list_area: Incomplete
    target_list_dialog: Incomplete
    proxy_list_area: Incomplete
    proxy_list_dialog: Incomplete
    clients_msg_text_area: Incomplete
    clients_msg_area: Incomplete
    application: Incomplete
    application_task: Incomplete
    bindings: Incomplete
    input_handler: Incomplete
    def __init__(self) -> None: ...
    message_area: Incomplete
    message_dialog: Incomplete
    input_area: Incomplete
    async def build_screen(self): ...
    async def run(self, octopwn, input_handler): ...
    def abort(self, event: Incomplete | None = None) -> None: ...
    async def print_main_window(self, timestamp, msg, username: Incomplete | None = None) -> None: ...
    async def clear_main_window(self) -> None: ...
    async def client_added(self, cid, client): ...
    async def refresh_clients(self, force: bool = False): ...
    async def target_added(self, tid, target): ...
    async def refresh_targets(self, force: bool = False): ...
    async def refresh_proxies(self, force: bool = False): ...
    async def proxy_added(self, pid, proxy): ...
    async def credential_added(self, cid, credential): ...
    async def refresh_credentials(self, force: bool = False): ...
    async def set_input_dialog_title(self, clientid: int, title: str): ...
    async def set_message_dialog_title(self, clientid: int, title: str): ...
    async def create_client_window(self, clientid: int, cliename: str, client_settings, client): ...
    async def print_client_msg(self, timestamp, clientid: int, msg: str, username: str = None): ...
    async def send_window_message(self, clientid: int, protomsg): ...
    async def window_message_incoming(self, clientid: int, msgtype: str, msg: Incomplete | None = None): ...
