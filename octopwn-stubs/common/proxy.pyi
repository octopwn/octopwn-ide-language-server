from _typeshed import Incomplete
from asysocks.unicomm.common.proxy import UniProxyProto as UniProxyProto, UniProxyTarget
from octopwn.remote.protocol.python import messages_pb2 as messages_pb2

class Proxy:
    ptype: Incomplete
    ip: Incomplete
    port: Incomplete
    username: Incomplete
    password: Incomplete
    agentid: Incomplete
    proxyfactory: Incomplete
    description: Incomplete
    def __init__(self, ptype: str, ip: str, port: int = None, username: str = None, password: str = None, agentid: str = None, proxyfactory: Incomplete | None = None, description: str = None) -> None: ...
    @staticmethod
    def from_dict(d: dict): ...
    def to_dict(self): ...
    def to_line(self): ...
    def to_proto(self): ...
    @staticmethod
    def from_proto(msg): ...
    def get_proxy(self, octoproxies, endpoint_ip: str, endpoint_port: int, timeout: int = 10, wsnetreuse: bool = True) -> list[UniProxyTarget]: ...
    def __deepcopy__(self, memo: Incomplete | None = None): ...

class ProxyChain:
    ptype: str
    chain: Incomplete
    description: Incomplete
    def __init__(self, description: str = None) -> None: ...
    @staticmethod
    def from_dict(d: dict): ...
    def to_line(self): ...
    def to_dict(self): ...
    def to_proto(self): ...
    @staticmethod
    def from_proto(msg): ...
    def resolve_proxies(self, octoproxies: dict[int, Proxy], wsnetreuse: bool = True) -> tuple[list[UniProxyTarget], Proxy]: ...
    def get_proxy(self, octoproxies: dict[int, Proxy], endpoint_ip: str, endpoint_port: int, timeout: int = 10, wsnetreuse: bool = True) -> list[UniProxyTarget]: ...
