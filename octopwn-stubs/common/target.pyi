from _typeshed import Incomplete
from aardwolf.commons.target import RDPConnectionDialect, RDPTarget
from aiosmb.commons.connection.target import SMBTarget
from asysocks.unicomm.common.target import UniProto, UniTarget
from asysocks.unicomm.protocol.client.http.commons.target import HTTPTarget
from minikerberos.common.target import KerberosTarget
from msldap.commons.target import MSLDAPTarget
from octopwn.remote.protocol.python import messages_pb2 as messages_pb2

OCTOPWN_TARGETS_TSV_HDR: Incomplete

class Target:
    hostname: Incomplete
    ip: Incomplete
    ports: Incomplete
    dcip: Incomplete
    realm: Incomplete
    hidden: Incomplete
    description: Incomplete
    isdc: Incomplete
    sid: Incomplete
    samaccountname: Incomplete
    ostype: Incomplete
    osver: Incomplete
    uac: Incomplete
    source: Incomplete
    dns: Incomplete
    checksum: Incomplete
    def __init__(self, ip: str, hostname: str = None, ports: list[int] = None, dcip: str = None, realm: str = None, hidden: bool = False, isdc: bool = False, sid: str = None, source: str = None, description: str = None, samaccountname: str = None, ostype: str = None, osver: str = None, uac: int = None, checksum: str = None) -> None: ...
    def calc_checksum(self): ...
    def to_dict(self): ...
    @staticmethod
    def from_dict(d: dict): ...
    def get_hostname_or_ip(self): ...
    def get_ip_or_hostname(self): ...
    def get_ip_and_hostname(self): ...
    def to_line(self): ...
    def to_compact(self): ...
    async def do_portscan(self, portranges) -> None: ...
    def get_smb_target(self, proxies: Incomplete | None = None, timeout: int = 1, domain: Incomplete | None = None, port: int = 445, protocol: UniProto = ...) -> SMBTarget: ...
    def get_ldap_target(self, proxies: Incomplete | None = None, timeout: int = 1, protocol=..., port: Incomplete | None = None, domain: Incomplete | None = None) -> MSLDAPTarget: ...
    def get_kerberos_target(self, proxies: Incomplete | None = None, timeout: int = 1, port: int = 88) -> KerberosTarget: ...
    def get_rdp_target(self, proxies: Incomplete | None = None, timeout: int = 1, domain: Incomplete | None = None, port: Incomplete | None = None, dialect: RDPConnectionDialect = ...) -> RDPTarget: ...
    def get_vnc_target(self, proxies: Incomplete | None = None, timeout: int = 1, port: int = None) -> RDPTarget: ...
    def get_ssh_target(self, proxies: Incomplete | None = None, timeout: int = 1, port: int = 22) -> UniTarget: ...
    def get_http_target(self, port, is_ssl: bool = False, proxies: Incomplete | None = None, timeout: int = 1) -> HTTPTarget: ...
    def get_winrm_target(self, port: int = None, is_ssl: bool = False, proxies: Incomplete | None = None, timeout: int = 1): ...
    def get_unitarget(self, port, is_ssl: bool = False, proxies: Incomplete | None = None, timeout: int = 1) -> UniTarget: ...
    def to_proto(self): ...
    @staticmethod
    def from_proto(msg): ...
    def to_tsv(self, separator: str = '\t', fields=...): ...
    def to_list(self, fields=...): ...
