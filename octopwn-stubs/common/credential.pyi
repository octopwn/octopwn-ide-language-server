from _typeshed import Incomplete
from aiosmb.commons.connection.target import SMBTarget as SMBTarget
from asyauth.common.constants import asyauthProtocol
from asyauth.common.credentials import CREDSSPCredential, SPNEGOCredential, UniCredential
from asyauth.common.subprotocols import SubProtocol as SubProtocol, SubProtocolSSPIProxy as SubProtocolSSPIProxy, SubProtocolWSNetDirect as SubProtocolWSNetDirect
from asysocks.unicomm.common.target import UniTarget
from msldap.commons.target import MSLDAPTarget as MSLDAPTarget
from octopwn.remote.protocol.python import messages_pb2 as messages_pb2

OCTOPWN_CREDENTIALS_TSV_HDR: Incomplete

class Credential:
    domain: Incomplete
    username: Incomplete
    stype: Incomplete
    secret: Incomplete
    hidden: Incomplete
    certfile: Incomplete
    keyfile: Incomplete
    certfiledata: Incomplete
    keyfiledata: Incomplete
    description: Incomplete
    subprotocol: Incomplete
    subprotocolobj: Incomplete
    sid: Incomplete
    source: Incomplete
    checksum: Incomplete
    def __init__(self, username: str, secret: str, stype: str, domain: str = None, certfile: str = None, keyfile: str = None, hidden: bool = False, certfiledata: str = None, keyfiledata: str = None, sid: str = None, source: str = None, description: str = None, subprotocol: str = 'NATIVE', subprotocolobj: Incomplete | None = None, checksum: str = None) -> None: ...
    def calc_checksum(self): ...
    def to_dict(self): ...
    @staticmethod
    def from_dict(d: dict): ...
    def to_line(self, truncate: bool = True): ...
    def to_simple_line(self): ...
    def get_subprotocol(self, target: UniTarget = None) -> SubProtocol: ...
    def get_kerberos_target_from_target(self, target: UniTarget, dcip: str = None): ...
    def get_credential(self, authprotocol: asyauthProtocol, target: UniTarget = None, dcip: str = None) -> UniCredential: ...
    def get_spnego_credential(self, authprotocol: asyauthProtocol, target: UniTarget, dcip: str = None) -> SPNEGOCredential: ...
    def get_credssp_credential(self, authprotocol: asyauthProtocol, target: UniTarget, dcip: str = None) -> CREDSSPCredential: ...
    def get_spnegoex_credential(self, target: UniTarget, dcip: str = None) -> CREDSSPCredential: ...
    def get_smb_connection(self, authprotocol: asyauthProtocol, target: SMBTarget, dcip: str = None): ...
    def get_ldap_connection(self, authprotocol: asyauthProtocol, target: MSLDAPTarget = None, dcip: str = None): ...
    def to_proto(self): ...
    @staticmethod
    def from_proto(msg): ...
    def __deepcopy__(self, memo: Incomplete | None = None): ...
    def to_tsv(self, separator: str = '\t', fields=...): ...
    def to_list(self, fields=...): ...
